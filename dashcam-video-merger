#!/usr/bin/env perl

use Getopt::Tabular;
use File::Spec::Functions qw(rel2abs);
use File::Temp;

use autodie;
use strict;
use warnings;

my $ffmpeg_filter_hd =
      '[0:v]scale=1280:1024[main];'
    . '[1:v]crop=x=566:y=430:w=1132:h=650[pip];'
    . '[pip]scale=w=iw/2.1:h=ih/2.1[pip];'
    . '[pip]eq=brightness=0.15[pip];'
    . '[main][pip]overlay=W-w:0';

my $codec = '';
my $ffmpeg_settings = "-loglevel warning -preset slow -sws_flags lanczos $codec";


sub ffmpeg_join_cmd {
    my ($playlist, $out) = @_;
    return "ffmpeg -f concat -safe 0 -i $playlist -c copy $out";
}

sub ffmpeg_pip_cmd {
    my ($i1, $i2, $o) = @_;
    return qq{ffmpeg -i $i1 -i $i2 $ffmpeg_settings -filter_complex "$ffmpeg_filter_hd" $o};
}

sub run_command {
    my $cmd = shift;
    print "$cmd\n";
    system($cmd) == 0 or die "Comand failed with code: $?";
}

sub overlay_back_on_front {
    my ($out_dir, @front_chunk_files) = @_;

    @front_chunk_files > 0 or die "No video chunks found!";

    my @out_chunks;
    for my $front (@front_chunk_files) {
        $front =~ m,Front/(\S*)F\.MP4$,
            or die "Unexpected filename format: $front";

        my $base = $1;
        my $back = "Back/${base}B.MP4";
        my $output = "$out_dir/${base}.MP4";

        -f $front or die "File '$front' is missing";
        -f $back or die "File '$back' is missing";
        -e $output and die "File '$output' already exists";

        run_command(ffmpeg_pip_cmd $front, $back, $output);
        push @out_chunks, "${base}.MP4";
    }
    return @out_chunks;
}

sub write_playlist {
    my ($playlist, @outs) = @_;

    open my $fh, '>', $playlist;
    print $fh join "\n", map { "file '$_'" } @outs;
}

sub main {
    my $input_dir = '.';
    my $output_file = 'output.mp4';

    my @options = (
        ['-i', 'string', 1, \$input_dir, "Path where Front/ and Back/ with video files are located" ],
        ['-o', 'string', 1, \$output_file, "Name of output file" ],
    );
    Getopt::Tabular::SetOptionPatterns qw|(--)([\w-]+) (-)(\w+)|;
    Getopt::Tabular::SetHelpOption("--help");
    GetOptions(\@options, \@ARGV) or exit(1);

    $output_file = rel2abs $output_file;
    $input_dir = rel2abs $input_dir;

    my $tmp_dir = File::Temp->newdir("dvmXXXXXX", TMPDIR => 1);
    print "Will use directory $tmp_dir to store temporary files...\n";
    my $playlist = "$tmp_dir/playlist.txt";

    chdir $input_dir;

    -d 'Front' && -d 'Back' or die
       "'Front' and 'Back' directories not found at $input_dir\nYou probably need to set a different input path (or cd there).\n";

    my @outs = overlay_back_on_front($tmp_dir, sort glob 'Front/*.MP4');
    write_playlist $playlist, @outs;

    run_command(ffmpeg_join_cmd($playlist, $output_file));
}

main();

